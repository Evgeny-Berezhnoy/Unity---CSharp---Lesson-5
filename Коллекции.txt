Коллекция: List<T>

Описание: Строго типизированный список объектов.
Применение: Хранение списка объектов и их последующая обработка.

+ Автоматически расширяется путем удвоения количества элементов.
+ Можно указать начальную размерность при создании.
+ Есть индексатор => можно обратиться к любому элементу коллекции по индексу в квадратных скобках.
+ Поддерживает поиск, сортировку.
+ Можно разом добавить множество с помощью метода AddRange().
+ Можно убрать лишние незаполненные элементы с помощью метода TrimExcess().
+ Максимальная емкость - 2 000 000 000 элементов (.NET Framework).


Пример использования: список врагов, список позиций, список коллайдеров.





Коллекция SortedList<TKey, TValue>

Описание: Массив пар Ключ-Значение с извлечением O(log n), где n - число элементов в словаре.

+ Использует меньше памяти, чем SortedDictionary<TKey, TValue>.
+ Если список заполняется только один раз из отсортированных данных, SortedList<TKey,TValue> то выполняется быстрее чем SortedDictionary<TKey,TValue>.

- Имеет более медленные операции вставки и удаления неотсортированных данных, чем SortedDictionary<TKey, TValue>.





Коллекция: HashSet<T>

Описание: Неупорядоченный список уникальных элементов.

+ Быстрое добавление, удаление, проврка наличия.
+ Предоставляет больше возможностей, чем LINQ.
+ Максимальная емкость - 2 000 000 000 элементов (.NET Framework).

- Не сортируется.

Пример использования: Список коллайдеров, список сохранений, список обрабатываемых файлов.





Коллекция: SortedSet<T>

Описание: Упорядоченный список уникальных элементов.

+ Быстрое добавление, удаление, проврка наличия.
+ Список сортируется автоматически.

- Изменение значений сортировки существующих элементов не поддерживается и может привести к непредвиденному поведению.





Коллекция: ObservableCollection<T>

Описание: List<T> с событием, выполняющимся при изменении списка.

Пример использования: игровой интерфейс - при добавлении в коллекцию новой открытой формы изменять/адаптировать остальные формы для их подстройки под новую форму.





Коллекция: Queue<T>

Описание: Очередь из элементов, работающая по принципу FIFO (First in - first out)

Пример использования: Вывод текста в диалоге. Заполняем очередь символами текста и каждый кадр выводим по букве.





Коллекция: Stack<T>

Описание: Очередь из элементов, работающая по принципу LIFO (Last in - first out)

Пример использования: Работа с интерфейсом - последовательно открытые окна потом закрываются в обратной очереди.





Коллекция: Dictionary<TKey, TValue>

Описание: Коллекция пар Ключ-Значение. Имея на руках элемент, являющийся одним из ключей словаря, можно получить значение этой пары.

Пример: Инвентарь - по имеющемуся ключу - предмету инвентаря получать количество имеющихся предметов.





Коллекция SortedDictionary<TKey, TValue>

Описание: Массив пар Ключ-Значение с извлечением O(log n), где n - число элементов в словаре.

- Использует больше памяти, чем SortedList<TKey, TValue>.

- Имеет более быстрые операции вставки и удаления неотсортированных данных, чем SortedList<TKey, TValue>.
- Если список заполняется только один раз из отсортированных данных, SortedList<TKey,TValue> то выполняется быстрее чем SortedDictionary<TKey,TValue>.